#!/bin/sh

cp -r /tmp/src/deployments/* /usr/local/tomcat/webapps/

# Source code provided to STI will be copied to ${HOME}/source
# LOCAL_SOURCE_DIR=${HOME}/source
# mkdir -p $LOCAL_SOURCE_DIR

# DEPLOY_DIR=${JWS_HOME}/webapps

# cp -r /tmp/src/deployments/* $DEPLOY_DIR/

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
#ARTIFACT_DIR=${ARTIFACT_DIR-target}

# function copy_artifacts() {
#   if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
#     echo "Copying all WAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
#     cp -v $LOCAL_SOURCE_DIR/$1/*.war $DEPLOY_DIR 2> /dev/null
#   fi
# }

# # Copy the STI source for compilation
# cp -ad /tmp/src/* $LOCAL_SOURCE_DIR


# # If a pom.xml is present, this is a normal build scenario
# # so run maven.
# if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
#   pushd $LOCAL_SOURCE_DIR &> /dev/null

#   if [ -z "$MAVEN_ARGS" ]; then
#     export MAVEN_ARGS="-DskipTests"
#   fi

#   echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

#   echo "Maven version:"
#   mvn --version

#   # Execute the actual build
#   mvn -e $MAVEN_ARGS

#   ERR=$?
#   if [ $ERR -ne 0 ]; then
#     echo "Aborting due to error code $ERR from Maven build"
#     exit $ERR
#   fi

#   # Copy built artifacts (if any!) from the target/ directory
#   # to the $DEPLOY_DIR directory for later deployment
#   copy_artifacts "$ARTIFACT_DIR"

#   # clean up after maven
#   mvn clean
#   if [ -d "$HOME/.m2/repository" ]; then
#     rm -r "$HOME/.m2/repository"
#   fi

#   popd &> /dev/null
# fi

# # Copy (probably binary) artifacts from the deployments/
# # directory to the $DEPLOY_DIR directory for later deployment
# copy_artifacts "deployments"

# # If tomcat configuration files are present in STI source, copy them to config directory
# if [ -d $LOCAL_SOURCE_DIR/conf ]; then
#   echo "Copying config files from project..."
#   cp -v $LOCAL_SOURCE_DIR/conf/* $JWS_HOME/conf/
# fi